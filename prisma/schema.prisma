// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

//||||||||||||||||##########||||||||||||||||//
//                   USER                   //
//||||||||||||||||##########||||||||||||||||//
model User {
  id                  String              @id @default(uuid())
  googleId            String?             @unique
  githubId            Int?                @unique
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  completedOnboarding Boolean             @default(false)
  currentUrl          String?
  courseProgress      CourseProgress[]
  moduleProgress      ModuleProgress[]
  subModuleProgress   SubModuleProgress[]
  lessonProgress      LessonProgress[]
  tests               Test[]
  checkpoints         Checkpoint[]
  projects            Project[]
  badges              Badge[]
}

//||||||||||||||||##########||||||||||||||||//
//                  COURSE                  //
//||||||||||||||||##########||||||||||||||||//
model Course {
  id        String   @id @default(uuid())
  title     String
  slug      String
  published Boolean
  jsonId    String   @unique
  modules   Module[]
}

model Module {
  id         String      @id @default(uuid())
  title      String
  slug       String
  jsonId     String      @unique
  courseId   String
  course     Course      @relation(fields: [courseId], references: [id])
  subModules SubModule[]
}

model SubModule {
  id       String   @id @default(uuid())
  title    String
  slug     String
  jsonId   String   @unique
  moduleId String
  lessons  Lesson[]
  module   Module   @relation(fields: [moduleId], references: [id])
}

model Lesson {
  id          String    @id @default(uuid())
  title       String
  slug        String
  jsonId      String    @unique
  subModuleId String
  subModule   SubModule @relation(fields: [subModuleId], references: [id])
}

//||||||||||||||||##########||||||||||||||||//
//                 PROGRESS                 //
//||||||||||||||||##########||||||||||||||||//
model CourseProgress {
  id             String           @id @default(uuid())
  title          String
  slug           String
  score          Int              @default(0)
  status         String           @default("IN_PROGRESS") //IN_PROGRESS, COMPLETED
  users          User[]
  moduleProgress ModuleProgress[]
  project        Project?
}

model ModuleProgress {
  id                String              @id @default(uuid())
  title             String
  slug              String
  score             Int                 @default(0)
  status            String              @default("LOCKED") //LOCKED, IN_PROGRESS, COMPLETED
  order             Int
  courseProgressId  String
  users             User[]
  courseProgress    CourseProgress      @relation(fields: [courseProgressId], references: [id])
  subModuleProgress SubModuleProgress[]
  badges            Badge[]
  test              Test?
  checkpoint        Checkpoint?
}

model SubModuleProgress {
  id               String           @id @default(uuid())
  title            String
  slug             String
  score            Int              @default(0)
  status           String           @default("LOCKED") //LOCKED, IN_PROGRESS, COMPLETED
  order            Int
  moduleProgressId String
  users            User[]
  moduleProgress   ModuleProgress   @relation(fields: [moduleProgressId], references: [id])
  lessonProgress   LessonProgress[]
  test             Test?
  checkpoint       Checkpoint?
}

model LessonProgress {
  id                  String            @id @default(uuid())
  title               String
  slug                String
  status              String            @default("LOCKED") //LOCKED, IN_PROGRESS, COMPLETED
  subModuleProgressId String
  order               Int
  users               User[]
  subModuleProgress   SubModuleProgress @relation(fields: [subModuleProgressId], references: [id])
}

model Badge {
  id                   String         @id @default(uuid())
  title                String
  locked_description   String
  unlocked_description String
  level                String // NOVICE, ADEPT, PROFICIENT, VIRTUOSO
  status               String         @default("LOCKED") //LOCKED, UNLOCKED
  moduleProgressId     String
  userId               String
  user                 User           @relation(fields: [userId], references: [id])
  moduleProgress       ModuleProgress @relation(fields: [moduleProgressId], references: [id])
}

model Checkpoint {
  id                  String             @id @default(uuid())
  title               String
  score               Int                @default(0)
  status              String             @default("LOCKED") //LOCKED, IN_PROGRESS, COMPLETED
  moduleProgressId    String?            @unique
  subModuleProgressId String?            @unique
  users               User[]
  moduleProgress      ModuleProgress?    @relation(fields: [moduleProgressId], references: [id])
  subModuleProgress   SubModuleProgress? @relation(fields: [subModuleProgressId], references: [id])
}

model Test {
  id                  String             @id @default(uuid())
  title               String
  status              String             @default("LOCKED") //LOCKED, AVAILABLE  COMPLETED
  score               Int                @default(0)
  attempts            Int                @default(0)
  attempted           Boolean            @default(false)
  nextAttemptAt       DateTime?
  moduleProgressId    String?            @unique
  subModuleProgressId String?            @unique
  users               User[]
  moduleProgress      ModuleProgress?    @relation(fields: [moduleProgressId], references: [id])
  subModuleProgress   SubModuleProgress? @relation(fields: [subModuleProgressId], references: [id])
}

//||||||||||||||||##########||||||||||||||||//
//                 PROJECT                  //
//||||||||||||||||##########||||||||||||||||//

model Project {
  id               String         @id @default(uuid())
  title            String
  slug             String
  status           String         @default("LOCKED") //LOCKED, IN_PROGRESS, COMPLETED
  courseProgressId String         @unique
  contributors     User[]
  courseProgress   CourseProgress @relation(fields: [courseProgressId], references: [id])
}
